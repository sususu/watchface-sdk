// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios9.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name SifliOTAManagerSDK
import CommonCrypto
import CoreBluetooth
import Foundation
@_exported import SifliOTAManagerSDK
import Swift
import UIKit
import Zip
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@objc public enum NorImageID : Swift.UInt8 {
  case HCPU = 0
  case LCPU = 1
  case PATCH = 2
  case RES = 3
  case FONT_OR_MAX = 4
  case EX = 5
  case OTA_MANAGER = 6
  case TINY_FONT = 7
  case BOOT_LOADER = 11
  case NONE = 0xff
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
@objc public enum BleCoreManagerState : Swift.Int {
  case unknown = 0
  case resetting = 1
  case unsupported = 2
  case unauthorized = 3
  case poweredOff = 4
  case poweredOn = 5
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum NandImageID : Swift.UInt16 {
  case HCPU = 0
  case LCPU = 1
  case PATCH = 2
  case RES = 3
  case LCPU_PATCH = 4
  case DYN = 5
  case MUSIC = 6
  public init?(rawValue: Swift.UInt16)
  public typealias RawValue = Swift.UInt16
  public var rawValue: Swift.UInt16 {
    get
  }
}
@objc public class SFOTALogModel : ObjectiveC.NSObject {
  @objc final public let timestamp: Swift.Int
  @objc final public let message: Swift.String
  @objc public init(timestamp: Swift.Int, message: Swift.String)
  @objc deinit
}
@objc public enum SFOTAErrorType : Swift.Int {
  case Unknown = 0
  case ConnectTimeout
  case ConnectionCanceled
  case Disconnected
  case FailedToConnect
  case General
  case SearchTimeout
  case RequestTimeout
  case LoadResourceZipFailed
  case LoadControlFileFailed
  case LoadImageFileFailed
  case ErrorCodeFromDevice
  case InsufficientBytes
  case UnavailableBleStatus
  case InvalidParams
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers @objc public class SFOTAError : ObjectiveC.NSObject {
  @objc final public let errorType: SifliOTAManagerSDK.SFOTAErrorType
  @objc final public let errorDes: Swift.String
  @objc override dynamic public var debugDescription: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc public enum NorV1TriggerMode : Swift.Int {
  case normal = 0
  case force
  case resume
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension Foundation.NSData {
  public var customDescription: Swift.String {
    get
  }
}
@objc public enum SFOTAType : Swift.Int {
  case none
  case nand
  case norV2
  case norV1
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum SFOTANorV1Mode : Swift.Int {
  case normal = 0
  case force
  case resume
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc public class SFNandImageFileInfo : ObjectiveC.NSObject {
  @objc final public let path: Foundation.URL
  @objc final public let imageID: SifliOTAManagerSDK.NandImageID
  @objc public init(path: Foundation.URL, imageID: SifliOTAManagerSDK.NandImageID)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc public class SFNorImageFileInfo : ObjectiveC.NSObject {
  @objc final public let path: Foundation.URL
  @objc final public let imageID: SifliOTAManagerSDK.NorImageID
  @objc public init(path: Foundation.URL, imageID: SifliOTAManagerSDK.NorImageID)
  @objc override dynamic public var description: Swift.String {
    @objc get
  }
  @objc deinit
}
@objc public protocol SFOTAManagerDelegate : ObjectiveC.NSObjectProtocol {
  @objc func otaManager(manager: SifliOTAManagerSDK.SFOTAManager, updateBleState state: SifliOTAManagerSDK.BleCoreManagerState)
  @objc func otaManager(manager: SifliOTAManagerSDK.SFOTAManager, stage: SifliOTAManagerSDK.SFOTAProgressStage, totalBytes: Swift.Int, completedBytes: Swift.Int)
  @objc func otaManager(manager: SifliOTAManagerSDK.SFOTAManager, complete error: SifliOTAManagerSDK.SFOTAError?)
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class SFOTAManager : ObjectiveC.NSObject {
  @objc public static var SDKVersion: Swift.String {
    @objc get
  }
  @objc public static let share: SifliOTAManagerSDK.SFOTAManager
  @objc weak public var delegate: (any SifliOTAManagerSDK.SFOTAManagerDelegate)?
  @objc public var searchingTimeout: Swift.Int
  @objc public func logTest()
  @objc public var bleState: SifliOTAManagerSDK.BleCoreManagerState {
    @objc get
  }
  @objc public var isBusy: Swift.Bool {
    @objc get
  }
  @objc public var otaType: SifliOTAManagerSDK.SFOTAType {
    @objc get
  }
  @objc public func startOTANand(targetDeviceIdentifier: Swift.String, resourcePath: Foundation.URL?, controlImageFilePath: Foundation.URL?, imageFileInfos: [SifliOTAManagerSDK.SFNandImageFileInfo], tryResume: Swift.Bool, imageResponseFrequnecy: Swift.UInt8 = 4)
  @objc public func startOTANorV2(targetDeviceIdentifier: Swift.String, controlImageFilePath: Foundation.URL, imageFileInfos: [SifliOTAManagerSDK.SFNorImageFileInfo], tryResume: Swift.Bool, responseFrequency: Swift.UInt8 = 20)
  @objc public func startOTANorV1(targetDeviceIdentifier: Swift.String, ctrlFilePath: Foundation.URL, imageFileInfos: [SifliOTAManagerSDK.SFNorImageFileInfo], triggerMode: SifliOTAManagerSDK.NorV1TriggerMode, responseFrequency: Swift.UInt8 = 20)
  @objc public func stop()
  @objc public func initSDK()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class QDataTools {
  public static func SplitData(data: Foundation.Data, upperlimit: Swift.Int) -> Swift.Array<Foundation.Data>
  public static func Reverse(srcData: Foundation.Data) -> Foundation.Data
  @objc deinit
}
@objc public enum OTALogLevel : ObjectiveC.NSInteger {
  case info = 0
  case warn = 1
  case debug = 2
  case error = 3
  public init?(rawValue: ObjectiveC.NSInteger)
  public typealias RawValue = ObjectiveC.NSInteger
  public var rawValue: ObjectiveC.NSInteger {
    get
  }
}
@objc public protocol SFOTALogManagerDelegate : ObjectiveC.NSObjectProtocol {
  @objc func otaLogManager(manager: SifliOTAManagerSDK.SFOTALogManager, onLog log: SifliOTAManagerSDK.SFOTALogModel!, logLevel level: SifliOTAManagerSDK.OTALogLevel)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class SFOTALogManager : ObjectiveC.NSObject {
  @objc public static let share: SifliOTAManagerSDK.SFOTALogManager
  @objc weak public var delegate: (any SifliOTAManagerSDK.SFOTALogManagerDelegate)?
  @objc public var logEnable: Swift.Bool {
    @objc get
    @objc set
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class QBleLogManager : ObjectiveC.NSObject {
  @objc public static let share: SifliOTAManagerSDK.QBleLogManager
  @objc public var openLog: Swift.Bool
  @objc deinit
}
@objc public enum SFOTAProgressStage : Swift.Int {
  case nand_res
  case nand_image
  case nor
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension SifliOTAManagerSDK.NorImageID : Swift.Equatable {}
extension SifliOTAManagerSDK.NorImageID : Swift.Hashable {}
extension SifliOTAManagerSDK.NorImageID : Swift.RawRepresentable {}
extension SifliOTAManagerSDK.BleCoreManagerState : Swift.Equatable {}
extension SifliOTAManagerSDK.BleCoreManagerState : Swift.Hashable {}
extension SifliOTAManagerSDK.BleCoreManagerState : Swift.RawRepresentable {}
extension SifliOTAManagerSDK.NandImageID : Swift.Equatable {}
extension SifliOTAManagerSDK.NandImageID : Swift.Hashable {}
extension SifliOTAManagerSDK.NandImageID : Swift.RawRepresentable {}
extension SifliOTAManagerSDK.SFOTAErrorType : Swift.Equatable {}
extension SifliOTAManagerSDK.SFOTAErrorType : Swift.Hashable {}
extension SifliOTAManagerSDK.SFOTAErrorType : Swift.RawRepresentable {}
extension SifliOTAManagerSDK.NorV1TriggerMode : Swift.Equatable {}
extension SifliOTAManagerSDK.NorV1TriggerMode : Swift.Hashable {}
extension SifliOTAManagerSDK.NorV1TriggerMode : Swift.RawRepresentable {}
extension SifliOTAManagerSDK.SFOTAType : Swift.Equatable {}
extension SifliOTAManagerSDK.SFOTAType : Swift.Hashable {}
extension SifliOTAManagerSDK.SFOTAType : Swift.RawRepresentable {}
extension SifliOTAManagerSDK.SFOTANorV1Mode : Swift.Equatable {}
extension SifliOTAManagerSDK.SFOTANorV1Mode : Swift.Hashable {}
extension SifliOTAManagerSDK.SFOTANorV1Mode : Swift.RawRepresentable {}
extension SifliOTAManagerSDK.OTALogLevel : Swift.Equatable {}
extension SifliOTAManagerSDK.OTALogLevel : Swift.Hashable {}
extension SifliOTAManagerSDK.OTALogLevel : Swift.RawRepresentable {}
extension SifliOTAManagerSDK.SFOTAProgressStage : Swift.Equatable {}
extension SifliOTAManagerSDK.SFOTAProgressStage : Swift.Hashable {}
extension SifliOTAManagerSDK.SFOTAProgressStage : Swift.RawRepresentable {}
